@page "/charts/{roomId:int}"
@using ApexCharts
@using CentralHub.WebUI.Data
@using System.Globalization
@using CentralHub.Api.Model.Responses.Measurements
@implements IDisposable
@inject MeasurementService MeasurementService

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<div class="container">
    <div class="row">
        <div class="col">
            <InputDate
                Type="InputDateType.DateTimeLocal"
                min="@_firstDateTime.ToString("yyyy-MM-ddThh:mm:ss", CultureInfo.InvariantCulture)"
                max="@MaxDateTime.ToString("yyyy-MM-ddThh:mm:ss", CultureInfo.InvariantCulture)"
                @bind-Value="@MinDateTime"
                />
        </div>
        <div class="col">
            <InputDate
                Type="InputDateType.DateTimeLocal"
                min="@MinDateTime.ToString("yyyy-MM-ddThh:mm:ss", CultureInfo.InvariantCulture)"
                @bind-Value="@MaxDateTime" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <ApexChart @ref="_chart" TItem="AggregatedMeasurements" Title="Data" Debug="true" Options="_chartOptions">
                <ApexPointSeries
                    TItem="AggregatedMeasurements"
                    Items="_aggregatedMeasurements"
                    Name="Wifi Devices"
                    SeriesType="SeriesType.Line"
                    XValue="e => e.EndTime.ToUnixTimeMilliseconds()"
                    YValue="e => (decimal)e.WifiCount"
                    Stroke="@(new SeriesStroke{ Width=3, DashSpace=3, Color="#ff3300" })"
                />
                <ApexPointSeries
                    TItem="AggregatedMeasurements"
                    Items="_aggregatedMeasurements"
                    Name="Bluetooth Devices"
                    SeriesType="SeriesType.Line"
                    XValue="e => e.EndTime.ToUnixTimeMilliseconds()"
                    YValue="e => e.BluetoothCount"
                    Stroke="@(new SeriesStroke{ Width=3, DashSpace=3, Color="#0033ff" })"
                />
            </ApexChart>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int RoomId { get; set; }
    
    private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    private IReadOnlyCollection<AggregatedMeasurements>? _aggregatedMeasurements;

    private readonly ApexChartOptions<AggregatedMeasurements> _chartOptions = new();


    private DateTime _firstDateTime;
    private DateTime _minDateTime = DateTime.Today - TimeSpan.FromDays(1);
    private DateTime _maxDateTime = DateTime.Now;

    public DateTime MinDateTime
    {
        get => _minDateTime;
        set
        {
            _minDateTime = value;
            InvokeAsync(async () =>
            {
                await UpdateAggregatedMeasurements();
                StateHasChanged();
                await _chart!.RenderAsync();
            });
        }
    }

    public DateTime MaxDateTime
    {
        get => _maxDateTime;
        set { _maxDateTime = value;
            InvokeAsync(async () =>
            {
                await UpdateAggregatedMeasurements();
                StateHasChanged();
                await _chart!.RenderAsync();
            });
        }
    }

    private ApexChart<AggregatedMeasurements>? _chart;

    private async Task UpdateAggregatedMeasurements()
    {
        _aggregatedMeasurements = await MeasurementService.GetAggregatedMeasurements(RoomId, MinDateTime.ToUniversalTime(), MaxDateTime.ToUniversalTime(), _cancellationTokenSource.Token);

        // HACK!: Add dummy data because the charts crash if there is no data and a page reload is necessary to get it back
        if (!_aggregatedMeasurements.Any())
        {
            _aggregatedMeasurements = new[] {new AggregatedMeasurements(0, MinDateTime.ToUniversalTime(), MaxDateTime.ToUniversalTime(), 0, 0)};
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        _firstDateTime = (await MeasurementService.GetFirstAggregatedMeasurementsDateTime(RoomId, _cancellationTokenSource.Token)).GetValueOrDefault();
        await UpdateAggregatedMeasurements();
        _chartOptions.Chart = new Chart()
        {
            Type = ChartType.RangeArea
        };
        
        _chartOptions.Colors = new List<string> { "#ff3300", "#0033ff" };
        _chartOptions.Fill = new Fill
        {
            Opacity = new List<double> { 1, 1 }
        };

        _chartOptions.Tooltip = new Tooltip()
        {
            X = new TooltipX()
            {
                Format = "yyyy-MM-dd hh:mm:ss",
            },
        };

        _chartOptions.Xaxis = new XAxis()
        {
            Type = XAxisType.Datetime,
            Labels = new XAxisLabels()
            {
                DatetimeUTC = false
            }
        };
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
    }
}