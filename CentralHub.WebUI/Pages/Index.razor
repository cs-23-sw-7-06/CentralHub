@page "/"
@using CentralHub.Api.Model.Responses.Tracker
@using CentralHub.WebUI.Data
@using CentralHub.Api.Model.Responses.Room
@implements IDisposable
@inject RoomService RoomService
@inject TrackerService TrackerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;

<PageTitle>Rooms</PageTitle>

<h1>Rooms</h1>

<div class="container">
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-light float-end" @onclick="AddRoomModal"><span class="oi oi-plus"></span></button>
        </div>
    </div>
    <div class="row">
        <table class="table">
            <tbody>
            @foreach (var wRoom in _wRooms)
            {
                <tr style="border-top-width: 1px"> 
                    <td>
                        <span class="oi oi-home"></span>
                        @wRoom.Room.Name
                    </td>
                    <td>
                        <div class="float-end">
                            <button type="button" class="btn btn-light" onclick="location.href='/charts/@wRoom.Room.RoomId'"><span class="oi oi-graph"></span></button>
                            <button type="button" class="btn btn-light" @onclick="() => EditRoomModal(wRoom)"><span class="oi oi-pencil"></span></button>
                            <button type="button" class="btn btn-light" @onclick="() => AddTrackerModal(wRoom)"><span class="oi oi-plus"></span></button>
                            <button type="button" class="btn btn-light" @onclick="() => ToggleNode(wRoom)"><span class="oi oi-chevron-bottom"></span></button>
                        </div>
                    </td>
                </tr>
                    <tr style="@(ShowOrHide(wRoom.IsExpanded))">
                        <td colspan="2" style="padding: 0 20px;">
                            <table class="table" style="margin: -1px">
                                <tbody>
                                @foreach (var tracker in wRoom.Children)
                                {
                                    <tr>
                                        <td>
                                            <span class="oi oi-rss"></span>
                                            @tracker.Name
                                        </td>
                                        <td>
                                            <div class="float-end">
                                                <button type="button" class="btn btn-light" @onclick="()=> EditTrackerModal(wRoom, tracker)"><span class="oi oi-pencil"></span></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </td>
                    </tr>
            }
            </tbody>
        </table>
        </div>
</div>

<div class="modal fade" id="addRoomModal" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4>Add room</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <table>
                    <tr>
                        <td>
                            Room name:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="text" class="form-control" @bind="_roomName"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Room description:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <textarea class="form-control" rows="3" @bind="_roomDescription"></textarea>
                        </td>
                    </tr>
                                        <tr>
                        <td>
                            Room Capacity:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="number" class="form-control" @bind="_roomCapacity"/>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn" @onclick='()=> HideModal("addRoomModal")'>Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="() => ConfirmAddRoom(_roomName, _roomDescription, _roomCapacity, [])">Confirm</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editRoomModal" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4>Edit room</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <table>
                    <tr>
                        <td>
                            Edit room name:
                        </td>
                        <td>
                            Number of trackers:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="text" class="form-control"  @bind="_roomName"/>
                        </td>
                        <td>
                            @_selectedWRoom?.TrackerCount
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Edit room description:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <textarea class="form-control" rows="3"  @bind="_roomDescription"></textarea>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Room Capacity:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="number" class="form-control" @bind="_roomCapacity"/>
                        </td>
                    </tr>
                </table>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="() => DeleteRoomModal(_selectedWRoom)">Delete</button>
                <button type="button" class="btn" @onclick='()=> HideModal("editRoomModal")'>Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="() => ConfirmEditRoom(_selectedWRoom, _roomName, _roomDescription, _roomCapacity, [])">Confirm</button>
            </div>
        </div>
    </div>
</div>

@if(_unregisteredTrackers.Length == 0)
{
    <div class="modal fade" id="addTrackerModal" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4>Add tracker</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p>
                        <em>No unregistered trackers to add!</em>
                    </p>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                        <button type="button" class="btn" @onclick= '()=> HideModal("addTrackerModal")'>Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="modal fade" id="addTrackerModal" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4>Add tracker</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table>
                        <tr>
                            <td>
                                Tracker name:
                            </td>
                            <td>
                                Assigned room:
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="text" class="form-control" @bind="@_trackerName"/>
                            </td>
                            <td>
                                <select class="form-control" @bind="@_selectedRoomId">  
                                    @foreach (var wRoom in _wRooms)
                                    {
                                        <option value="@wRoom.Room.RoomId">@wRoom.Room.Name</option>
                                    }
                                </select>
                            </td>
                        </tr> 
                        <tr>
                            <td>
                                Tracker description:
                            </td>
                            <td>
                                Unregistered trackers:
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <textarea class="form-control" rows="3" @bind="_trackerDescription"></textarea>
                            </td>
                            <td>
                                <select class="form-control" @bind="@_selectedTrackerMacAddress">  
                                    @foreach (var uTracker in _unregisteredTrackers)
                                    {
                                        <option value="@uTracker.WifiMacAddress">@uTracker.WifiMacAddress</option>
                                    }
                                </select>
                            </td>
                        </tr>
                    </table>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick= '()=> HideModal("addTrackerModal")'>Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick='() => ConfirmAddTracker(_selectedRoomId, _selectedTrackerMacAddress, _trackerName, _trackerDescription)'>Confirm</button>
                </div>
            </div>
        </div>
    </div>
}


<div class="modal fade" id="editTrackerModal" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4>Edit tracker</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <table>
                    <tr>
                        <td>
                            Edit tracker name:
                        </td>
                        <td>
                            Assigned Room:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="text" class="form-control" @bind="@_trackerName"/>
                        </td>
                        <td>
                            <select class="form-control"  @bind="@_selectedRoomId"> 
                                @foreach (var wRoom in _wRooms)
                                {
                                    <option value="@wRoom.Room.RoomId">@wRoom.Room.Name</option>
                                }
                            </select>
                        </td>
                    </tr> 
                    <tr>
                        <td>
                            Tracker description:
                        </td>
                        <td>
                            MAC-Address:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <textarea class="form-control" rows="3" @bind="_trackerDescription"></textarea>
                        </td>
                        <td>
                            WiFi: @_selectedTracker?.WifiMacAddress
                            <br/>
                            Bluetooth: @_selectedTracker?.BluetoothMacAddress
                        </td>
                    </tr> 
                </table>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="() => DeleteTrackerModal(_selectedWRoom, _selectedTracker)">Delete</button>
                <button type="button" class="btn" @onclick= '()=> HideModal("editTrackerModal")'>Cancel</button>
                <button type="button" class="btn btn-primary" @onclick='() => ConfirmEditTracker(_selectedTracker, _selectedRoomId, _trackerName, _trackerDescription)'>Confirm</button>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private List<Room> _rooms = new List<Room>();
    private List<RoomWrapper> _wRooms = new List<RoomWrapper>();
    private UnregisteredTracker[] _unregisteredTrackers = Array.Empty<UnregisteredTracker>();
    private RoomWrapper? _selectedWRoom;
    private Tracker? _selectedTracker;
    private int _selectedRoomId = -1;
    private string _roomName = "Your room name";
    private string _roomDescription = "Your room description";
    private int _roomCapacity = 10;

    private string _trackerName = "Your tracker name";
    private string _trackerDescription = "Your tracker description"; 
    private string? _selectedTrackerMacAddress = null;
    
    private async Task AddRoomModal()
    {
        await ShowModal("addRoomModal");
        StateHasChanged();
    }

    private async Task ConfirmAddRoom(string name, string description, int capacity, List<int> neighbourIds)
    {
        if(string.IsNullOrWhiteSpace(name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a name for the room");
            return;
        }
        
        await RoomService.AddRoomAsync(name, description, capacity, neighbourIds, _cancellationTokenSource.Token);
        await HideModal("addRoomModal");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task EditRoomModal(RoomWrapper wRoom)
    {
        _selectedWRoom = wRoom;
        _roomName = _selectedWRoom.Room.Name;
        _roomDescription = _selectedWRoom.Room.Description;
        wRoom.TrackerCount = await GetTrackerCountAsync(wRoom.Room);
        await ShowModal("editRoomModal");
        StateHasChanged();
    }

    private async Task DeleteRoomModal(RoomWrapper? wRoom)
    {
        if(wRoom == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Room is null");
            return;
        }

        await DeleteRoom(wRoom);
        await HideModal("editRoomModal");
        StateHasChanged();
    }

    private async Task ConfirmEditRoom(RoomWrapper? wRoom, string name, string description, int capacity, List<int> neighbourIds)
    {
        if(string.IsNullOrWhiteSpace(name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a name for the room");
            return;
        }
        if(wRoom == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Room is null");
            return;
        }
    

        await RoomService.UpdateRoomAsync(wRoom.Room, name, description, capacity, neighbourIds, _cancellationTokenSource.Token);
        await HideModal("editRoomModal");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task AddTrackerModal(RoomWrapper wRoom)
    {
        _unregisteredTrackers = await TrackerService.GetUnregisteredTrackersAsync(_cancellationTokenSource.Token);
        
        if(_unregisteredTrackers.Length != 0)
        {
            _selectedTrackerMacAddress = _unregisteredTrackers[0].WifiMacAddress;
        }

        _selectedRoomId = wRoom.Room.RoomId;
        await ShowModal("addTrackerModal");
        StateHasChanged();
    }

    private async Task ConfirmAddTracker(int roomId, string? trackerMacAddress, string name, string description)
    {
        if(string.IsNullOrWhiteSpace(name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a name for the tracker");
            return;
        } 
        if(roomId == -1)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Room's ID is invalid");
            return;
        } 
        if(trackerMacAddress == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tracker's MAC-Address is null");
            return;
        }

        var selectedRoom = _rooms.Single(r => r.RoomId == roomId);

        var selectedTracker = _unregisteredTrackers.Single(t => t.WifiMacAddress == trackerMacAddress);
        
        await TrackerService.AddTrackerAsync(selectedRoom, selectedTracker, name, description, _cancellationTokenSource.Token);
        await HideModal("addTrackerModal");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task EditTrackerModal(RoomWrapper wRoom, Tracker tracker)
    {
        _selectedWRoom = wRoom;
        _selectedRoomId = wRoom.Room.RoomId;
        _selectedTracker = tracker;
        _trackerName = tracker.Name;
        _trackerDescription = tracker.Description;
        await ShowModal("editTrackerModal");
        StateHasChanged();
    }

    private async Task ConfirmEditTracker(Tracker? tracker, int roomId, string name, string description)
    {
        if(string.IsNullOrWhiteSpace(name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a name for the tracker");
            return;
        }
        if(tracker == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tracker is null");
            return;
        } 
        if(roomId == -1)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Room's ID is invalid");
            return;
        }

        var selectedRoom = _rooms.Single(r => r.RoomId == roomId);

        await TrackerService.UpdateTrackerAsync(selectedRoom, tracker, name, description, _cancellationTokenSource.Token);
        await HideModal("editTrackerModal");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task DeleteTrackerModal(RoomWrapper? wRoom, Tracker? tracker)
    {
        if(wRoom == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Room is null");
            return;
        } 
        if(tracker == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tracker is null");
            return;
        }

        await DeleteTracker(wRoom, tracker);
        await HideModal("editTrackerModal");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    
    }

    private sealed class RoomWrapper
    {
        public RoomWrapper(Room room, Tracker[] children)
        {
            Room = room;
            Children = children;
            TrackerCount = children.Length;
        }
        public Room Room { get; set; }
        public Tracker[] Children { get; set; }
        public int TrackerCount { get; set; }
        public bool IsExpanded { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _rooms = (await RoomService.GetRoomsAsync(_cancellationTokenSource.Token)).ToList();
        _unregisteredTrackers = await TrackerService.GetUnregisteredTrackersAsync(_cancellationTokenSource.Token);

        var roomWrappers = new List<RoomWrapper>();
        foreach (var room in _rooms)
        {
            roomWrappers.Add(new RoomWrapper(
                room, 
                await TrackerService.GetTrackersAsync(room, _cancellationTokenSource.Token)
                ));
        }
        _wRooms = roomWrappers;
        AssignStandardValues();
    }
    private async Task<int> GetTrackerCountAsync(Room room)
    {
        var trackers = await TrackerService.GetTrackersAsync(room, _cancellationTokenSource.Token);

        return trackers.Length;
    }

    private async Task DeleteRoom(RoomWrapper wRoom)
    {
        // Remove the room on the server
        await RoomService.RemoveRoomAsync(wRoom.Room, _cancellationTokenSource.Token);
        // Remove the room in memory
        _rooms.Remove(wRoom.Room);
        _wRooms.Remove(wRoom);
        
        StateHasChanged();
    }

    private async Task DeleteTracker(RoomWrapper wRoom, Tracker tracker)
    {
        // Remove the tracker on the server
        await TrackerService.RemoveTrackerAsync(tracker, _cancellationTokenSource.Token);
        // Remove the tracker in memory
        var newTrackers = await TrackerService.GetTrackersAsync(wRoom.Room, _cancellationTokenSource.Token);
        wRoom.Children = newTrackers;

        StateHasChanged();
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

    private void ToggleNode(RoomWrapper wRoom)
    {
        wRoom.IsExpanded = !wRoom.IsExpanded;
        StateHasChanged();
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
        AssignStandardValues();
        StateHasChanged();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private void AssignStandardValues()
    {
        _selectedWRoom = null;
        _selectedTracker = null;

        _selectedRoomId = -1;
        _roomName = "Your room name"; 
        _roomDescription = "Your room description";
        _trackerName = "Your tracker name";
        _trackerDescription = "Your tracker description"; 
        _selectedTrackerMacAddress = null;
    }

    private static string ShowOrHide(bool show)
    {
        return show ? string.Empty : "display: none";
    }
}